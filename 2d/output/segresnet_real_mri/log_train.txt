2024-03-12 22:22:09,217 Brain Segmentation INFO: Namespace(background=True
 device='cuda'
 epochs=300
 eval_batch_size=1
 image_dir='/mnt/strokeapp/Datasets/Seg_ctmri'
 input='real_mri'
 lr=0.001
 mask_dir='/mnt/strokeapp/Datasets/Seg_mask'
 model_name='segresnet'
 name='segresnet_real_mri'
 output_dir='output/segresnet_real_mri'
 roi=(96
 96)
 seed=123
 spatial_size=(96
 96
 96)
 sw_batch=4
 synthesize_model='resvit'
 test_batch_size=4
 train_batch_size=16
 weight_decay=0.0001)
2024-03-12 22:22:09,318 Brain Segmentation INFO: ----------------------------------------------------------------------------------------------------
SegResNet(
  (act_mod): ReLU(inplace=True)
  (convInit): Convolution(
    (conv): Conv2d(1, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (down_layers): ModuleList(
    (0): Sequential(
      (0): Identity()
      (1): ResBlock(
        (norm1): GroupNorm(8, 8, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 8, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (1): Sequential(
      (0): Convolution(
        (conv): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      )
      (1): ResBlock(
        (norm1): GroupNorm(8, 16, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 16, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (norm1): GroupNorm(8, 16, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 16, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (2): Sequential(
      (0): Convolution(
        (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      )
      (1): ResBlock(
        (norm1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 32, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (norm1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 32, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (3): Sequential(
      (0): Convolution(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      )
      (1): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (3): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (4): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
  )
  (up_layers): ModuleList(
    (0): Sequential(
      (0): ResBlock(
        (norm1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 32, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (1): Sequential(
      (0): ResBlock(
        (norm1): GroupNorm(8, 16, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 16, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (2): Sequential(
      (0): ResBlock(
        (norm1): GroupNorm(8, 8, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 8, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
  )
  (up_samples): ModuleList(
    (0): Sequential(
      (0): Convolution(
        (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): UpSample(
        (upsample_non_trainable): Upsample(scale_factor=(2.0, 2.0), mode=bilinear)
      )
    )
    (1): Sequential(
      (0): Convolution(
        (conv): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): UpSample(
        (upsample_non_trainable): Upsample(scale_factor=(2.0, 2.0), mode=bilinear)
      )
    )
    (2): Sequential(
      (0): Convolution(
        (conv): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): UpSample(
        (upsample_non_trainable): Upsample(scale_factor=(2.0, 2.0), mode=bilinear)
      )
    )
  )
  (conv_final): Sequential(
    (0): GroupNorm(8, 8, eps=1e-05, affine=True)
    (1): ReLU(inplace=True)
    (2): Convolution(
      (conv): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
----------------------------------------------------------------------------------------------------

2024-03-12 22:22:09,320 Brain Segmentation INFO: SegResNet(
  (act_mod): ReLU(inplace=True)
  (convInit): Convolution(
    (conv): Conv2d(1, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (down_layers): ModuleList(
    (0): Sequential(
      (0): Identity()
      (1): ResBlock(
        (norm1): GroupNorm(8, 8, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 8, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (1): Sequential(
      (0): Convolution(
        (conv): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      )
      (1): ResBlock(
        (norm1): GroupNorm(8, 16, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 16, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (norm1): GroupNorm(8, 16, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 16, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (2): Sequential(
      (0): Convolution(
        (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      )
      (1): ResBlock(
        (norm1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 32, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (norm1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 32, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (3): Sequential(
      (0): Convolution(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      )
      (1): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (3): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (4): ResBlock(
        (norm1): GroupNorm(8, 64, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 64, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
  )
  (up_layers): ModuleList(
    (0): Sequential(
      (0): ResBlock(
        (norm1): GroupNorm(8, 32, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 32, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (1): Sequential(
      (0): ResBlock(
        (norm1): GroupNorm(8, 16, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 16, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (2): Sequential(
      (0): ResBlock(
        (norm1): GroupNorm(8, 8, eps=1e-05, affine=True)
        (norm2): GroupNorm(8, 8, eps=1e-05, affine=True)
        (act): ReLU(inplace=True)
        (conv1): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (conv2): Convolution(
          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
  )
  (up_samples): ModuleList(
    (0): Sequential(
      (0): Convolution(
        (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): UpSample(
        (upsample_non_trainable): Upsample(scale_factor=(2.0, 2.0), mode=bilinear)
      )
    )
    (1): Sequential(
      (0): Convolution(
        (conv): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): UpSample(
        (upsample_non_trainable): Upsample(scale_factor=(2.0, 2.0), mode=bilinear)
      )
    )
    (2): Sequential(
      (0): Convolution(
        (conv): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): UpSample(
        (upsample_non_trainable): Upsample(scale_factor=(2.0, 2.0), mode=bilinear)
      )
    )
  )
  (conv_final): Sequential(
    (0): GroupNorm(8, 8, eps=1e-05, affine=True)
    (1): ReLU(inplace=True)
    (2): Convolution(
      (conv): Conv2d(8, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
2024-03-12 22:22:09,327 Brain Segmentation INFO: ----------------------------------------------------------------------------------------------------
2024-03-12 22:23:14,660 Brain Segmentation INFO: model was saved, epoch 0 is the best.
2024-03-12 22:23:14,662 Brain Segmentation INFO: 
====================
Epoch: 0
train loss: 0.9802097056501655
eval metric: 0.05466967076063156
====================

2024-03-12 22:24:14,883 Brain Segmentation INFO: model was saved, epoch 1 is the best.
2024-03-12 22:24:14,884 Brain Segmentation INFO: 
====================
Epoch: 1
train loss: 0.9674021694608914
eval metric: 0.09937232732772827
====================

2024-03-12 22:25:13,792 Brain Segmentation INFO: model was saved, epoch 2 is the best.
2024-03-12 22:25:13,793 Brain Segmentation INFO: 
====================
Epoch: 2
train loss: 0.9491372537869279
eval metric: 0.11903295665979385
====================

2024-03-12 22:26:14,147 Brain Segmentation INFO: model was saved, epoch 3 is the best.
2024-03-12 22:26:14,149 Brain Segmentation INFO: 
====================
Epoch: 3
train loss: 0.9315827516137912
eval metric: 0.12969869375228882
====================

2024-03-12 22:27:13,953 Brain Segmentation INFO: model was saved, epoch 4 is the best.
2024-03-12 22:27:13,955 Brain Segmentation INFO: 
====================
Epoch: 4
train loss: 0.917259550062559
eval metric: 0.1556970328092575
====================

2024-03-12 22:28:13,330 Brain Segmentation INFO: model was saved, epoch 5 is the best.
2024-03-12 22:28:13,331 Brain Segmentation INFO: 
====================
Epoch: 5
train loss: 0.9095093052714102
eval metric: 0.17203190922737122
====================

2024-03-12 22:29:12,893 Brain Segmentation INFO: 
====================
Epoch: 6
train loss: 0.9066394867115123
eval metric: 0.1593324840068817
====================

2024-03-12 22:30:12,952 Brain Segmentation INFO: model was saved, epoch 7 is the best.
2024-03-12 22:30:12,953 Brain Segmentation INFO: 
====================
Epoch: 7
train loss: 0.9021103891634172
eval metric: 0.17315882444381714
====================

2024-03-12 22:31:16,483 Brain Segmentation INFO: 
====================
Epoch: 8
train loss: 0.900384343038964
eval metric: 0.1592268943786621
====================

2024-03-12 22:32:17,338 Brain Segmentation INFO: 
====================
Epoch: 9
train loss: 0.9049458252967045
eval metric: 0.15948644280433655
====================

2024-03-12 22:33:21,936 Brain Segmentation INFO: model was saved, epoch 10 is the best.
2024-03-12 22:33:21,937 Brain Segmentation INFO: 
====================
Epoch: 10
train loss: 0.900592315261082
eval metric: 0.1759769171476364
====================

2024-03-12 22:34:26,223 Brain Segmentation INFO: 
====================
Epoch: 11
train loss: 0.8995818426852585
eval metric: 0.1363983303308487
====================

2024-03-12 22:35:30,086 Brain Segmentation INFO: 
====================
Epoch: 12
train loss: 0.8959033325795205
eval metric: 0.1625804603099823
====================

2024-03-12 22:36:35,474 Brain Segmentation INFO: model was saved, epoch 13 is the best.
2024-03-12 22:36:35,475 Brain Segmentation INFO: 
====================
Epoch: 13
train loss: 0.8937942752594589
eval metric: 0.21524691581726074
====================

2024-03-12 22:37:39,351 Brain Segmentation INFO: 
====================
Epoch: 14
train loss: 0.8916194664054019
eval metric: 0.19333255290985107
====================

2024-03-12 22:38:43,875 Brain Segmentation INFO: 
====================
Epoch: 15
train loss: 0.8913867037783387
eval metric: 0.1938711404800415
====================

2024-03-12 22:39:49,280 Brain Segmentation INFO: 
====================
Epoch: 16
train loss: 0.8941973284367593
eval metric: 0.20486053824424744
====================

2024-03-12 22:40:54,160 Brain Segmentation INFO: 
====================
Epoch: 17
train loss: 0.8894137923595726
eval metric: 0.19831302762031555
====================

2024-03-12 22:41:59,988 Brain Segmentation INFO: 
====================
Epoch: 18
train loss: 0.8898660526961408
eval metric: 0.21151646971702576
====================

2024-03-12 22:43:04,802 Brain Segmentation INFO: model was saved, epoch 19 is the best.
2024-03-12 22:43:04,803 Brain Segmentation INFO: 
====================
Epoch: 19
train loss: 0.8875923506835456
eval metric: 0.2194063663482666
====================

